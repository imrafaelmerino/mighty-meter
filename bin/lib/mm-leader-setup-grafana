#!/usr/bin/env bash
set -o errexit

echo "(MIGHTY-METER-INSTALLER) | Executing $0 $@"

main(){

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source ${DIR}/functions
source ${DIR}/../.versions
source ${DIR}/../.defaults

WAITING_TIME=5

print_message "Setting up Grafana..."

print_message "Waiting $WAITING_TIME sec for Grafana container to be started..."

sleep $WAITING_TIME

print_message "Calling Grafana API to create InfluxDB datasource..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--retry-max-time 60 \
--url ${_GRAFANA_API_URL}/datasources \
--header 'Content-Type: application/json' \
-d '{
  "name": "mighty-meter",
  "type": "influxdb",
  "access": "proxy",
  "url": "http://'${_NAME_LEADER_INFLUXDB_CONTAINER}':'${_INFLUX_DB_PORT}'",
  "isDefault": true,
  "jsonData" : { "version": "Flux", "organization": "'${_INFLUXDB_ORG}'", "defaultBucket":"'${_INFLUXDB_BUCKET_NAME}'", "tlsSkipVerify": true },
  "secureJsonData": { "token" : "'${_INFLUXDB_TOKEN}'"}
}'

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Datasource created!"
fi

DASHBOARD_PAYLOAD_REALTIME="$DIR"/../../leader/dashboards/realtime.json
DASHBOARD_PAYLOAD_EXPLORE="$DIR"/../../leader/dashboards/explore.json
DASHBOARD_PAYLOAD_COMP_BY_VERSION="$DIR"/../../leader/dashboards/compare_by_version.json
DASHBOARD_PAYLOAD_COMP_BY_USERS="$DIR"/../../leader/dashboards/compare_by_users.json
DASHBOARD_PAYLOAD_COMP_BY_TEST="$DIR"/../../leader/dashboards/compare_by_test.json

print_message "Calling Grafana API to create realtime dashboard..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--url ${_GRAFANA_API_URL}/dashboards/db \
--retry-max-time 60 \
--header 'Content-Type: application/json' \
-d @${DASHBOARD_PAYLOAD_REALTIME}

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Dashboard created!"
fi

print_message "Calling Grafana API to create explorer dashboard..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--url ${_GRAFANA_API_URL}/dashboards/db \
--retry-max-time 60 \
--header 'Content-Type: application/json' \
-d @${DASHBOARD_PAYLOAD_EXPLORE}

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Dashboard created!"
fi

print_message "Calling Grafana API to create Compare-By-Test dashboard..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--url ${_GRAFANA_API_URL}/dashboards/db \
--retry-max-time 60 \
--header 'Content-Type: application/json' \
-d @${DASHBOARD_PAYLOAD_COMP_BY_TEST}

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Dashboard created!"
fi

print_message "Calling Grafana API to create Compare-By-Version dashboard..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--url ${_GRAFANA_API_URL}/dashboards/db \
--retry-max-time 60 \
--header 'Content-Type: application/json' \
-d @${DASHBOARD_PAYLOAD_COMP_BY_VERSION}

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Dashboard created!"
fi

print_message "Calling Grafana API to create Compare-By-Users dashboard..."

curl -sS -o /dev/null -w "Status Code Http Response: %{http_code}\n" \
--retry 10 \
--retry-delay 2 \
--max-time 10 \
--url ${_GRAFANA_API_URL}/dashboards/db \
--retry-max-time 60 \
--header 'Content-Type: application/json' \
-d @${DASHBOARD_PAYLOAD_COMP_BY_USERS}

if [ $? -ne 0 ]; then
    error_exit "Failed to call API."
else
    print_message "Dashboard created!"
fi

}

main "$@"

